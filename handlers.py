from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards import main_kb, menu_kb, get_backtest_keyboard  
import logging
from datetime import datetime
from backtest import BacktestEngine
from config import sp500_tickers

def setup_router(trading_bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ TradingBot"""
    router = Router()

    @router.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π.",
            reply_markup=main_kb
        )

    @router.message(Command("help"))
    async def cmd_help(message: Message):
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n\n"
            "–ß–µ—Ä–µ–∑ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å!!! - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞"
        )

    @router.message(F.text == "üìã –ú–µ–Ω—é")
    async def show_menu(message: Message):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu_kb
        )

    @router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    async def show_info(message: Message):
        await message.answer(
            "–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ.\n"
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: Momentum Trading\n"
            "–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 (NY)\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API Alpaca Markets"
        )

    @router.callback_query(F.data == "portfolio_status")
    async def show_portfolio(callback: CallbackQuery):
        await callback.answer()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–∑ TradingBot
            positions, account, pnl = trading_bot.get_portfolio_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if not account:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = "–°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n"
            
            if positions:
                msg += "–ü–æ–∑–∏—Ü–∏–∏:\n"
                for symbol, qty in positions.items():
                    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                    position = next((p for p in trading_bot.trading_client.get_all_positions() 
                                   if p.symbol == symbol), None)
                    if position:
                        value = float(position.market_value)
                        msg += f"{symbol} ‚Äì {float(qty):.2f} —à—Ç. (${value:.2f})\n"
                    else:
                        msg += f"{symbol} ‚Äì {float(qty):.2f} —à—Ç. (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n"
            else:
                msg += "–ü–æ–∑–∏—Ü–∏–∏: –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
            
            msg += "\n–ü—Ä–æ—Ç—Ñ–µ–ª—å:\n"
            msg += f"–û—Ü–µ–Ω–∫–∞: {float(account.portfolio_value):.2f} euro\n"
            msg += f"–≠–∫–≤–∏—Ç–∏: {float(account.equity)::.2f} euro\n"
            msg += f"\nP&L: ${pnl:.2f} euro"
            
            await callback.message.answer(msg)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    @router.callback_query(F.data == "trading_stats")
    async def show_stats(callback: CallbackQuery):
        await callback.answer()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ TradingBot
            stats = trading_bot.get_trading_stats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞
            if not stats:
                raise ValueError("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
            msg = "–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            msg += f"–°–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('trades_today', 0)}\n"
            msg += f"–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${stats.get('pnl', 0.0):.2f}\n"
            msg += f"Win rate: {stats.get('win_rate', 0.0):.2f}%"
            await callback.message.answer(msg)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    @router.callback_query(F.data == "settings")
    async def show_settings(callback: CallbackQuery):
        await callback.answer()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ TradingBot
            settings = trading_bot.get_settings()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã
            if not settings:
                raise ValueError("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
            msg = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
            msg += f"- –í—Ä–µ–º—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {settings.get('rebalance_time', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            msg += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {settings.get('positions_count', 0)}\n"
            msg += f"- –†–µ–∂–∏–º: {settings.get('mode', '–Ω–µ –∑–∞–¥–∞–Ω')}"
            await callback.message.answer(msg)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data == "show_backtest")
    async def show_backtest_menu(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        await callback.message.edit_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:",
            reply_markup=get_backtest_keyboard()
        )

    @router.callback_query(F.data == "back_to_main")
    async def back_to_main_menu(callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=menu_kb
        )

    @router.callback_query(F.data.startswith("backtest_"))
    async def handle_backtest_period(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        if callback.data == "backtest_custom":
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "/backtest YYYY-MM-DD YYYY-MM-DD"
            )
            return
            
        _, start_date, end_date = callback.data.split('_')
        await run_backtest_for_period(callback.message, start_date, end_date)

    @router.message(Command("backtest"))
    async def handle_custom_backtest(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"""
        try:
            _, start_date, end_date = message.text.split()
            await run_backtest_for_period(message, start_date, end_date)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /backtest YYYY-MM-DD YYYY-MM-DD"
            )

    async def run_backtest_for_period(message: Message, start_date: str, end_date: str):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞...")
        
        engine = BacktestEngine(sp500_tickers)
        results = engine.run(start_date, end_date)
        
        if not results:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞")
            return
            
        report = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
            f"üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return']:.2f}%\n"
            f"üí∞ –ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${results['final_value']:.2f}\n"
            f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {results['max_drawdown']:.2f}%\n"
            f"üìä –ö–æ—ç—Ñ. –®–∞—Ä–ø–∞: {results['sharpe_ratio']:.2f}\n"
            f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['trades_count']}\n"
            f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {results['winning_trades']}\n"
            f"üìà Win rate: {(results['winning_trades']/results['trades_count']*100):.1f}%"
        )
        
        await message.answer(report)

    @router.message()
    async def echo(message: Message):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
            "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /help"
        )

    return router